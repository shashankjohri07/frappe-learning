Perfect 👌 tumne **Frappe Bench Architecture** ka diagram bheja hai. Chalo ise ekdum simple flow me samjhata hoon:

---

## 🔹 1. Bench Folder (outer wrapper)

* Sab kuch ek **bench instance** ke andar hota hai.
* Example: `bench-dev/`

  * Ye tumhara workspace hai jisme **apps**, **sites**, **env**, **logs** rakhe hote hain.

---

## 🔹 2. Apps

* `apps/` folder me sari apps hoti hain.
* Example:

  * `frappe` (framework itself)
  * `erpnext` (business app built on frappe)
  * `custom_app` (tumhari khud ki app)

👉 Apps = Code + Doctypes + Logic.

---

## 🔹 3. Sites

* `sites/` folder me har ek **site** ke liye alag folder banta hai.
* Example:

  * `frappe.io`
  * `erpnext.com`
  * `mysite.local`

👉 Site = Database + Config + Installed Apps.

* Har site ke andar ek `site_config.json` hota hai jo DB aur installed apps ka config rakhta hai.
* Matlab ek hi apps ko multiple sites use kar sakti hain, lekin **data har site ka alag** hota hai.

---

## 🔹 4. Supporting Services

Frappe ko chalane ke liye kuch aur cheezein background me chalte hain:

* **Node** → front-end build aur realtime (socket.io) ke liye
* **Werkzeug** → Python web server
* **Redis** → caching + queue + realtime jobs
* **Background Jobs** → asynchronous tasks (emails, schedulers)

---

## 🔹 5. Python Virtual Environment

* Ye saari Python dependencies (Frappe, ERPNext, Libraries) ko isolate karta hai.
* Matlab har bench apne alag env me chalega.

---

## 🔹 6. Database

* **MariaDB / Postgres** → backend database jisme har site ka data store hota hai.
* Ek site = ek database.

---

### ⚡ High-level relation (diagram ke hisaab se):

* **Bench** = container (workspace)

  * Inside Bench → `apps/` (code) + `sites/` (data + config)
  * Sites **use** Apps (ek site me multiple apps ho sakte hain)
  * Apps run hote hain **Python Env** ke andar, aur connect karte hain Redis, Node, Background Jobs se
  * Final data store hota hai **MariaDB/Postgres** me

---

👉 Ek line me:
**Apps = functionality/code, Sites = place where those apps are installed + data, Bench = environment that manages both.**

---

Bhai chaho to mai tumhare liye iska ek aur **apna banaya hua simplified drawing** bana ke de du taaki aur easily yaad ho jaye?


__________________________________________________________________________________________________________
⚡ In short:
bench new-app rental → ek nayi custom Frappe app create karta hai jiska naam rental hai.

each app has own github repo.

__________________________________________________________________________________________________________

bulk data improt and export data ->

Bahut useful topic uthaya hai 👍
Chalo **Frappe/ERPNext** me **bulk data import/export** ka pura system samjhata hoon.

---

## 🔹 1. Bulk Data Import (Excel/CSV se)

Aap data ko Excel ya CSV file ke through Doctype me import kar sakte ho.

### Steps:

1. Desk → **Data Import Tool** open karo.
2. Doctype choose karo (e.g., Customer, Item, ya apna custom Doctype).
3. “Download Template” button dabao → ek Excel/CSV template milega jisme required fields ke column already honge.
4. Us template me apna data fill karo.
5. Upload karo → aur Import chala do.

👉 Agar data bahut bada hai (10k+ rows), to Frappe background job use karta hai (asynchronous import).

---

## 🔹 2. Bulk Data Export

Aap existing data ko export karke Excel/CSV me le ja sakte ho.

### Steps:

1. Desk → Doctype list view open karo (e.g., Customer list).
2. Upar right-side me **Menu (...) → Export** option choose karo.
3. Fields select karo jo aap export karna chahte ho.
4. Export file download ho jaayegi (Excel/CSV).

---

## 🔹 3. Programmatic Import/Export (for developers)

Agar tum coding karna chahte ho:

* **Export JSON**:

  ```bash
  bench --site sitename export-docs module_name
  ```
* **Import JSON/YAML**:

  ```bash
  bench --site sitename import-docs module_name
  ```

Aur agar tum Python se karna chaho to `frappe.get_doc()` aur `frappe.new_doc()` methods se bulk create/update kar sakte ho.

---

## 🔹 4. Real-world Examples

* **Import**: Tumhare paas 5000 customers ka Excel hai → Data Import Tool se upload kar do.
* **Export**: Tumhare manager ne bola “sab invoices ki CSV bhejo” → Doctype list view → Export.

---

⚡ In short:

* **Import** = Data Import Tool (Excel/CSV template).
* **Export** = Doctype List → Menu → Export.
* **Devs ke liye** = `bench export-docs` / `import-docs` ya direct `frappe.get_doc()`.

__________________________________________________________________________________________________________

no-code rest api ,

type -> http
name -> driver list
url -> http://irfan.cabs/api/v2/document/driver

________________________________________________________________________________________________________


🔹 Virtual Field in Frappe

Virtual Field = aisa field jo database me store nahi hota, sirf runtime pe calculate ya render hota hai.

🔹 Normal Field vs Virtual Field

Normal Field:

Database column hota hai (MariaDB/Postgres me).

Har record ke saath persist hota hai.

Example: first_name, phone_number.

Virtual Field:

Database me column nahi banta.

Value runtime pe Python ya JS code se generate hoti hai.

Example: full_name = first_name + " " + last_name.

🔹 Use-cases

Computed values → e.g. Net Total = Sum of Item totals.

Display-only fields → e.g. Age (calculated from DOB).

Temporary logic → values jo persist karne ki zarurat nahi.


_______________________